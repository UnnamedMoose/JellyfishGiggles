using WaterLily, ParametricBodies, StaticArrays, Plots, CUDA
using GeometryBasics
include("viz.jl");

using ParametricBodies, StaticArrays, Plots
L = 2^3
T = Float32

# t = 0
cps_0 = SA{T}[0.000  0.024  0.064  0.175  0.323  0.481  0.643  0.798  0.996  1.191  1.228  1.201  1.171  1.178  1.154  0.804  0.606  0.475  0.397  0.340  0.323  0.000
                0.000  0.193  0.333  0.475  0.578  0.623  0.627  0.614  0.571  0.524  0.484  0.213  0.216  0.412  0.456  0.451  0.420  0.348  0.266  0.151 0.000  0.000] #*L .+ SA{T}[2L,3L]
# t = T/10
cps_1 = SA{T}[0.000  0.024  0.067  0.175  0.326  0.488  0.639  0.794  0.993  1.164  1.198  1.296  1.265  1.171  1.090  0.801  0.606  0.478  0.404  0.343  0.323  0.000
                0.000  0.193  0.326  0.469  0.564  0.609  0.606  0.590  0.537  0.501  0.470  0.216  0.206  0.412  0.426  0.438  0.396  0.335  0.256  0.154  0.000  0.000] # *L .+ SA{T}[2L, 3L]
# t = 2T/10
cps_2 = SA{T}[0.000  0.024  0.081  0.188  0.333  0.481  0.639  0.798  0.986  1.171  1.222  1.390  1.373  1.205  1.154  0.801  0.616  0.501  0.427  0.370  0.323  0.000
                0.000  0.193  0.319  0.455  0.547  0.589  0.583  0.550  0.473  0.419  0.321  0.173  0.159  0.304  0.334  0.380  0.366  0.311  0.243  0.148 0.000  0.000] #*L .+ SA{T}[2L,3L]
# t = 3T/10
cps_3 = SA{T}[0.000  0.034  0.091  0.199  0.337  0.481  0.629  0.781  0.973  1.077  1.181  1.346  1.319  1.198  1.154  0.798  0.643  0.522  0.448  0.387  0.357  0.000
                0.000  0.193  0.322  0.448  0.541  0.568  0.566  0.533  0.449  0.412  0.392  0.149  0.135  0.291  0.301  0.343  0.342  0.287  0.226  0.141  0.000  0.000] # *L .+ SA{T}[2L, 3L]    
# t = 4T/10
cps_4 = SA{T}[0.000  0.027  0.081  0.199  0.357  0.478  0.626  0.781  0.976  1.178  1.222  1.228  1.191  1.195  1.151  0.801  0.633  0.525  0.438  0.384  0.347  0.000
                0.000  0.204  0.326  0.466  0.562  0.589  0.587  0.560  0.507  0.467  0.437  0.200  0.206  0.359  0.389  0.381  0.363  0.315  0.233  0.158  0.000  0.000] # *L .+ SA{T}[2L, 3L]
# t = 5T/10
cps_5 = SA{T}[0.000  0.027  0.074  0.182  0.340  0.471  0.629  0.791  0.989  1.185  1.222  1.151  1.124  1.164  1.127  0.798  0.616  0.498  0.407  0.360  0.337  0.000
                0.000  0.204  0.340  0.483  0.585  0.620  0.624  0.608  0.561  0.518  0.478  0.237  0.250  0.420  0.454  0.452  0.410  0.352  0.253  0.172  0.000  0.000] # *L .+ SA{T}[2L, 3L]
# t = 6T/10
cps_6 = SA{T}[0.000  0.027  0.074  0.182  0.330  0.464  0.629  0.794  0.989  1.185  1.225  1.158  1.124  1.164  1.141  0.794  0.613  0.488  0.394  0.343  0.330  0.000
                0.000  0.204  0.340  0.483  0.592  0.637  0.641  0.628  0.592  0.532  0.495  0.233  0.250  0.403  0.454  0.469  0.424  0.366  0.267  0.175  0.000  0.000] # *L .+ SA{T}[2L, 3L]
# t = 7T/10
cps_7 = SA{T}[0.000  0.027  0.074  0.182  0.330  0.464  0.629  0.794  0.989  1.185  1.225  1.178  1.144  1.164  1.141  0.794  0.613  0.488  0.394  0.343  0.330  0.000
                0.000  0.204  0.340  0.483  0.592  0.637  0.641  0.628  0.592  0.532  0.495  0.227  0.230  0.403  0.454  0.469  0.424  0.366  0.267  0.175  0.000  0.000] # *L .+ SA{T}[2L, 3L]
# t = 8T/10
cps_8 = SA{T}[0.000  0.027  0.074  0.182  0.330  0.464  0.629  0.794  0.989  1.185  1.225  1.185  1.151  1.164  1.141  0.794  0.613  0.488  0.394  0.343  0.330  0.000
                0.000  0.204  0.340  0.483  0.592  0.637  0.641  0.628  0.592  0.532  0.495  0.230  0.233  0.403  0.454  0.469  0.424  0.366  0.267  0.175  0.000  0.000] # *L .+ SA{T}[2L, 3L]
# t = 9T/10
cps_9 = SA{T}[0.000  0.027  0.074  0.182  0.330  0.464  0.629  0.794  0.989  1.185  1.225  1.191  1.154  1.164  1.141  0.794  0.613  0.488  0.394  0.343  0.330  0.000
                0.000  0.204  0.340  0.483  0.592  0.637  0.641  0.628  0.592  0.532  0.495  0.220  0.220  0.403  0.454  0.469  0.424  0.366  0.267  0.175  0.000  0.000] # *L .+ SA{T}[2L, 3L]

cps_list = [cps_0, cps_1, cps_2, cps_3, cps_4, cps_5, cps_6, cps_7, cps_8, cps_9]

function dynamicSpline(;L=2^3,Re=50,U=4,ϵ=0.5,thk=2ϵ+√3+0.5,mem=Array,T=Float32)
    cps = SA{T}[0.000  0.024  0.064  0.175  0.323  0.481  0.643  0.798  0.996  1.191  1.228  1.201  1.171  1.178  1.154  0.804  0.606  0.475  0.397  0.340  0.323  0.000
                0.000  0.193  0.333  0.475  0.578  0.623  0.627  0.614  0.571  0.524  0.484  0.213  0.216  0.412  0.456  0.451  0.420  0.348  0.266  0.151 0.000  0.000]*L .+ SA{T}[2L,3L]

    curve = BSplineCurve(cps; degree=2)  # use BSplineCurve like in 3D version
    # body = HashedBody(curve, (0.0, 1.0); thk=thk, boundary=true)
    body = DynamicNurbsBody(curve; thk=thk, boundary=true)
    Simulation((8L,6L),(0,0),L; U, ν=U*L/Re, body, T, mem,ϵ)
end

sim = dynamicSpline(mem=CuArray);
t₀, duration, tstep = sim_time(sim), 10, 0.1;

Tp = eltype(sim.flow.p)

@gif for tᵢ in range(t₀, t₀ + duration; step=tstep)
    t = sum(sim.flow.Δt[1:end-1])
    period = 2.0 * sim.L / sim.U
    while t < tᵢ * sim.L / sim.U
        τ_total = Tp(t / period)
        frame = floor(Int, τ_total * 10)
        τ_local = τ_total * 10 - frame

        cps_a = cps_list[mod(frame, 10) + 1]
        cps_b = cps_list[mod(frame+1, 10) + 1]

        offset = SA{Tp}[2sim.L, 3sim.L]
        interpolated = ((1 - τ_local) .* cps_a .+ τ_local .* cps_b)*sim.L .+ offset
        sim.body = update!(sim.body, interpolated, sim.flow.Δt[end])
        sim_step!(sim; remeasure=true)
        t += sim.flow.Δt[end]
    end

    @inside sim.flow.σ[I] = WaterLily.curl(3,I,sim.flow.u) * sim.L / sim.U

    contourf(clamp.(Array(sim.flow.σ), -2, 2)', dpi=300,
        color=palette(:RdBu_11), clims=(-2,2), linewidth=0,
        aspect_ratio=:equal, legend=true)
    plot!(sim.body.curve; add_cp=false)

    println("tU/L=", round(tᵢ,digits=4), ", Δt=", round(sim.flow.Δt[end], digits=3))

end

gif_path = "dynamic_spline.gif"

